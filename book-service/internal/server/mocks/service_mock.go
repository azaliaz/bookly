// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/azaliaz/bookly/book-service/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockStorage) DeleteBook(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockStorageMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockStorage)(nil).DeleteBook), arg0)
}

// GetBook mocks base method.
func (m *MockStorage) GetBook(arg0 string) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockStorageMockRecorder) GetBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockStorage)(nil).GetBook), arg0)
}

// GetBooks mocks base method.
func (m *MockStorage) GetBooks() ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockStorageMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockStorage)(nil).GetBooks))
}

// GetBooksWithFilters mocks base method.
func (m *MockStorage) GetBooksWithFilters(searchTerm string, genres []string, year, sortBy string, ascending bool) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksWithFilters", searchTerm, genres, year, sortBy, ascending)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksWithFilters indicates an expected call of GetBooksWithFilters.
func (mr *MockStorageMockRecorder) GetBooksWithFilters(searchTerm, genres, year, sortBy, ascending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksWithFilters", reflect.TypeOf((*MockStorage)(nil).GetBooksWithFilters), searchTerm, genres, year, sortBy, ascending)
}

// SaveBook mocks base method.
func (m *MockStorage) SaveBook(arg0 models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockStorageMockRecorder) SaveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockStorage)(nil).SaveBook), arg0)
}

// SaveBooks mocks base method.
func (m *MockStorage) SaveBooks(arg0 []models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBooks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBooks indicates an expected call of SaveBooks.
func (mr *MockStorageMockRecorder) SaveBooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBooks", reflect.TypeOf((*MockStorage)(nil).SaveBooks), arg0)
}
